package main

import "core:os"
import "core:fmt"

Memory: [4096]byte

@(private)
fonset := [80]byte {
    0xF0, 0x90, 0x90, 0x90, 0xF0, 0x20, 0x60, 0x20, 0x20, 0x70,
    0xF0, 0x10, 0xF0, 0x80, 0xF0, 0xF0, 0x10, 0xF0, 0x10, 0xF0,
    0x90, 0x90, 0xF0, 0x10, 0x10, 0xF0, 0x80, 0xF0, 0x10, 0xF0,
    0xF0, 0x80, 0xF0, 0x90, 0xF0, 0xF0, 0x10, 0x20, 0x40, 0x40,
    0xF0, 0x90, 0xF0, 0x90, 0xF0, 0xF0, 0x90, 0xF0, 0x10, 0xF0,
    0xF0, 0x90, 0xF0, 0x90, 0x90, 0xE0, 0x90, 0xE0, 0x90, 0xE0,
    0xF0, 0x80, 0x80, 0x80, 0xF0, 0xE0, 0x90, 0x90, 0x90, 0xE0,
    0xF0, 0x80, 0xF0, 0x80, 0xF0, 0xF0, 0x80, 0xF0, 0x80, 0x80
}

load_rom :: proc(rom_filepath: string) 
{
    rom_data, ok := os.read_entire_file(rom_filepath, context.allocator)
    if !ok
    {
        fmt.println("something went wrong opening the file: %s", rom_filepath)
        return
    }
    defer delete(rom_data, context.allocator)

    for i in 0..<81 {
        Memory[i] = fonset[i]
    }

    for byte_value, i in rom_data  {
        Memory[i + 0x200] = byte_value
    }
}